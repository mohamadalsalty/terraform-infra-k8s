name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.8.2

    - name: Install Trivy
      run: |
        wget https://github.com/aquasecurity/trivy/releases/download/v0.21.0/trivy_0.21.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.21.0_Linux-64bit.deb


    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }} 

    - name: Terraform workspace select
      run: terraform workspace select prod || terraform workspace new prod
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }} 

        

    - name: Terraform Plan
      run: terraform plan -input=false -out=plan.tfplan && terraform show -json plan.tfplan > tfplan.json
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Trivy Scan Terraform config
      id: trivy_scan
      run: trivy config ./tfplan.json || exit 0

    - name: Check Trivy scan results
      if: steps.trivy_scan.outcome == 'success'
      run: |
        TRIVY_OUTPUT=$(trivy --format json ./tfplan.json)
        CRITICAL_COUNT=$(echo $TRIVY_OUTPUT | jq '.[0].Vulnerabilities | map(select(.Severity | contains("CRITICAL"))) | length')
        HIGH_COUNT=$(echo $TRIVY_OUTPUT | jq '.[0].Vulnerabilities | map(select(.Severity | contains("HIGH"))) | length')
        if [ $CRITICAL_COUNT -gt 0 ] || [ $HIGH_COUNT -gt 0 ]; then
          echo "Vulnerabilities found!"
          echo $TRIVY_OUTPUT | jq .
          exit 1
        fi
        
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve plan.tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
